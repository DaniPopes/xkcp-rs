searchState.loadedDescShard("xkcp_sys", 0, "xkcp-sys\nKMAC128 function, as defined in NIST’s Special …\nFunction to call after all input data have been input and …\nFunction to initialize the KMAC128 instance used in …\nFunction to squeeze output data. @param  kmInstance      …\nFunction to give input data to be MACed. @param  …\nKMAC256 function, as defined in NIST’s Special …\nFunction to call after all input data have been input and …\nFunction to initialize the KMAC256 instance used in …\nFunction to squeeze output data. @param  kmInstance      …\nFunction to give input data to be MACed. @param  …\nWrapper around <code>KangarooTwelve</code> to use the 128-bit security …\nWrapper around <code>KangarooTwelve</code> to use the 256-bit security …\nExtendable ouput function KangarooTwelve. @param  …\nFunction to call after all the input message has been …\nFunction to initialize a KangarooTwelve instance. @param  …\nFunction to squeeze output data. @param  ktInstance     …\nFunction to give input data to be absorbed. @param  …\nFunction to call after all input blocks have been input …\nFunction to initialize the Keccak[r, c] sponge function …\nFunction to squeeze output data. @param  hashInstance    …\nFunction to give input data to be absorbed. @param  …\nFunction to give input data to be compressed. @param  …\nFunction to compress input data and expand output data. …\nFunction to initialize a Kravatte instance with given key. …\nFunction to initialize a Kravatte SANE instance with given …\nFunction to unwrap ciphertext into plaintext. @param  …\nFunction to wrap plaintext into ciphertext. @param  …\nFunction to initialize a Kravatte SANSE instance with …\nFunction to unwrap ciphertext into plaintext. @param  …\nFunction to wrap plaintext into ciphertext. @param  …\nFunction to decipher ciphertext into plaintext. @param  …\nFunction to encipher plaintext into ciphertext. @param  …\nFunction to decipher ciphertext into plaintext. @param  …\nFunction to encipher plaintext into ciphertext. @param  …\nParallel hash function ParallelHash128, as defined in NIST…\nFunction to call after all input blocks have been input …\nFunction to initialize the parallel hash function …\nFunction to squeeze output data. @param  …\nFunction to give input data to be absorbed. @param  …\nParallel hash function ParallelHash256, as defined in NIST…\nFunction to call after all input blocks have been input …\nFunction to initialize the parallel hash function …\nFunction to squeeze output data. @param  …\nFunction to give input data to be absorbed. @param  …\nImplementation of SHA3-224 [FIPS 202]. @param  output      …\nImplementation of SHA3-256 [FIPS 202]. @param  output      …\nImplementation of SHA3-384 [FIPS 202]. @param  output      …\nImplementation of SHA3-512 [FIPS 202]. @param  output      …\nImplementation of the SHAKE128 extendable output function …\nImplementation of the SHAKE256 extendable output function …\nTuple hash function TupleHash128, as defined in NIST’s …\nFunction to call after all input blocks have been input …\nFunction to initialize the Tuple hash function …\nFunction to squeeze output data. @param  TupleHashInstance …\nFunction to give input data to be absorbed. @param  …\nTuple hash function TupleHash256, as defined in NIST’s …\nFunction to call after all input blocks have been input …\nFunction to initialize the Tuple hash function …\nFunction to squeeze output data. @param  TupleHashInstance …\nFunction to give input data to be absorbed. @param  …\nFunction to expand output data. @param  kvInstance      …\nFor the documentation, see SnP-documentation.h.\nFor the documentation, see SnP-documentation.h.\ncSHAKE128 function, as defined in NIST’s Special …\nFunction to call after all input blocks have been input …\nFunction to initialize the cSHAKE128 instance used in …\nFunction to squeeze output data. @param  cskInstance     …\nFunction to give input data to be absorbed. @param  …\ncSHAKE256 function, as defined in NIST’s Special …\nFunction to call after all input blocks have been input …\nFunction to initialize the cSHAKE256 instance used in …\nFunction to squeeze output data. @param  cskInstance     …\nFunction to give input data to be absorbed. @param  …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPointer to the tuple element data (Xn).\nThe number of input bits provided in this tuple element. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")